{"version":3,"sources":["HomePage.js","ArticleNew.js","ArticleShow.js","HomeRouting.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","props","state","error","undefined","articles","showArticle","id","baseUrl","process","REACT_APP_API_URL","trim","fetch","then","response","json","data","setState","message","this","className","map","item","index","key","title","text","to","Component","ArticleNew","handleChangeTitle","bind","handleChangeText","postArticle","event","target","value","url","article","method","body","JSON","stringify","headers","type","name","onChange","placeholder","onClick","ArticleShow","HomeRouting","path","exact","component","render","match","params","App","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.e5dde4a6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class HomePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      error: undefined,\r\n      articles: undefined,\r\n      showArticle: undefined,\r\n      id: undefined,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let baseUrl = \"https://boiling-peak-38811.herokuapp.com\";\r\n    if (process.env.REACT_APP_API_URL !== undefined) {\r\n      baseUrl = process.env.REACT_APP_API_URL.trim();\r\n    }\r\n    let url = baseUrl + \"/articles.json\";\r\n\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then(\r\n        (data) => {\r\n          this.setState({\r\n            articles: data,\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            error: error.message,\r\n          });\r\n        }\r\n      );\r\n  }\r\n  render() {\r\n    if (this.state.error) {\r\n      return <div>an error occured: {this.state.error}</div>;\r\n    } else if (this.state.articles === undefined) {\r\n      return (\r\n        <div>\r\n          <div>loading articles...</div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"appWrap\">\r\n          <div className=\"homePageWrap\">\r\n            <h1 className=\"heading\">Posted Articles</h1>\r\n            <ul>\r\n              {this.state.articles.map((item, index) => {\r\n                return (\r\n                  <li key={index}>\r\n                    {item.title} {item.text}{\" \"}\r\n                    <span>\r\n                      <Link to={\"/show-article/\" + item.id}>show article</Link>\r\n                    </span>\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n\r\n            <Link to={\"/new-article\"} className=\"buttonHomePage\">\r\n              <button className=\"buttonClass\">Write new article</button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\n\r\nexport default class ArticleNew extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      text: \"\",\r\n      id: undefined,\r\n    };\r\n    this.handleChangeTitle = this.handleChangeTitle.bind(this);\r\n    this.handleChangeText = this.handleChangeText.bind(this);\r\n    this.postArticle = this.postArticle.bind(this);\r\n  }\r\n\r\n  handleChangeTitle(event) {\r\n    this.setState({\r\n      title: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleChangeText(event) {\r\n    this.setState({\r\n      text: event.target.value,\r\n    });\r\n  }\r\n\r\n  postArticle() {\r\n    let baseUrl = \"https://boiling-peak-38811.herokuapp.com\";\r\n    if (process.env.REACT_APP_API_URL !== undefined) {\r\n      baseUrl = process.env.REACT_APP_API_URL.trim();\r\n    }\r\n\r\n    let url = baseUrl + \"/articles.json\";\r\n\r\n    let data = {\r\n      article: {\r\n        title: this.state.title,\r\n        text: this.state.text,\r\n      },\r\n    };\r\n\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        this.setState({\r\n          id: response.id,\r\n        });\r\n      });\r\n  }\r\n  render() {\r\n    if (this.state.id !== undefined) {\r\n      return (<Redirect to={\"/show-article/\" + this.state.id} />);\r\n    } else {\r\n      return (\r\n        <div className=\"articleNewPageWrap\">\r\n          <h1 className=\"heading\">New article</h1>\r\n          <div className=\"newArticleWrap\">\r\n            <label className=\"inputLabel\">\r\n              Title:\r\n              <input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                value={this.state.title}\r\n                onChange={this.handleChangeTitle}\r\n                placeholder=\"title\"\r\n              />\r\n            </label>\r\n            <label className=\"inputLabel\">\r\n              Text:\r\n              <input\r\n                type=\"text\"\r\n                name=\"text\"\r\n                value={this.state.text}\r\n                onChange={this.handleChangeText}\r\n                placeholder=\"text\"\r\n              />\r\n            </label>\r\n            <div className=\"postButton\">\r\n              <button className=\"button\" onClick={this.postArticle}>\r\n                Create article\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class ArticleShow extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      error: undefined,\r\n      article: undefined,\r\n      id: props.id,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let baseUrl = \"https://boiling-peak-38811.herokuapp.com\";\r\n    if (process.env.REACT_APP_API_URL !== undefined) {\r\n      baseUrl = process.env.REACT_APP_API_URL.trim();\r\n    }\r\n\r\n    let url = baseUrl + \"/articles/\" + this.state.id + \".json\";\r\n\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then(\r\n        (data) => {\r\n          this.setState({\r\n            article: data,\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            error: error.message,\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <div>an error occured: {this.state.error}</div>;\r\n    } else if (this.state.article === undefined) {\r\n      return (\r\n        <div>\r\n          <div>loading article...</div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"appWrap\">\r\n          <div className=\"homePageWrap\">\r\n            <h1 className=\"heading\">{this.state.article.title}</h1>\r\n            <div>{this.state.article.text}</div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport HomePage from \"./HomePage\";\r\nimport ArticleNew from \"./ArticleNew\";\r\nimport ArticleShow from \"./ArticleShow\";\r\n\r\nexport default class HomeRouting extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/\" exact component={HomePage} />\r\n            <Route path=\"/new-article\" exact component={ArticleNew} />\r\n            <Route path=\"/show-article/:id\" render={(props) => <ArticleShow id={props.match.params.id} />}></Route>\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport HomeRouting from './HomeRouting';\n\nfunction App() {\n  return (\n      <div className=\"appWrap\">\n        <HomeRouting/>\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}